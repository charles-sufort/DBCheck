MODULE mem_process1(l_num,a_cell,b_cell,sched)
 VAR
 	state : array 1..2 of {"WW","WR","W","R","NOP"};
 	mem_cell: array 1..2 of word[4]; 
	op_c: 1..4;
	finished: boolean;
	DEFINE op_state := state[1] = "W" | state[1] = "R" | state[2] = "W" | state[2] = "R";
	DEFINE nop_state := (state[1] = "NOP" & state[2] = "NOP") ;
	DEFINE WR_1 := state[1] = "WR" & a_cell.lock = l_num; 
	DEFINE WW_1 := state[1] = "WW" & a_cell.lock = l_num; 
	DEFINE WR_2 := state[2] = "WR" & b_cell.lock = l_num; 
	DEFINE WW_2 := state[2] = "WW" & b_cell.lock = l_num; 
 ASSIGN
	init(state[1]) := "NOP";
	init(state[2]) := "NOP";
	init(mem_cell[1]) := 0b_0000;
	init(mem_cell[2]) := 0b_0000;
	init(op_c) := 1;
	init(finished):= FALSE;
	next(op_c) := case
		op_c = 4: op_c;
		op_state : op_c + 1;
		nop_state & sched[op_c] = "NOP": op_c + 1;
		TRUE : op_c;
	esac;
	next(finished):= case
		op_state & op_c = 4: TRUE;
		TRUE: FALSE;
	esac;
	next(state[1]) := case
		WR_1 : "R";
		WW_1 : "W";
		! finished & sched[op_c] = "R_1" : "WR";
		! finished & sched[op_c] = "W_1" : "WW";
		! finished & sched[op_c] = "NOP" : "NOP";
		state[1] = "WR" | state[1] = "WW" : state[1];
		TRUE: "NOP";
	esac;
	next(state[2]) := case
		WR_2 : "R";
		WW_2 : "W";
		! finished & sched[op_c] = "R_2" : "WR";
		! finished & sched[op_c] = "W_2" : "WW";
		! finished & sched[op_c] = "NOP" : "NOP";
		state[2] = "WR" | state[2] = "WW" : state[2];
		TRUE: "NOP";
	esac;
	next(mem_cell[1]) := case
		state[1] = "R": a_cell.cell[1];
		state[2] = "R": b_cell.cell[1];
		TRUE: mem_cell[1];
	esac;
	next(mem_cell[2]) := case
		state[1] = "R": a_cell.cell[2];
		state[2] = "R": b_cell.cell[2];
		TRUE: mem_cell[2];
	esac;

	
MODULE mem_block1(c_num,proc1,proc2)
 VAR
 	cell: array 1..2 of word[4];
	lock: {0,1,2};
	DEFINE proc1_state := c_num = 1 ? proc1.state[1] : proc1.state[2];
	DEFINE proc2_state := c_num = 1 ? proc2.state[1] : proc2.state[2];
	DEFINE P_W12 := (proc1_state = "WW" | proc1_state = "WR") & (proc2_state = "WW" | proc2_state = "WR");
	DEFINE P_W1 := (proc1_state = "WW" |  proc1_state = "WR");
	DEFINE P_W2 := (proc2_state = "WW" |  proc2_state = "WR");
	DEFINE P_WL1 := (proc1_state = "WW" | proc1_state = "WR" ) & (lock = 1);
	DEFINE P_WL2 := (proc2_state = "WW" | proc2_state = "WR" ) & (lock = 2);
 ASSIGN
 	init(cell[1]) := 0b_0000;
 	init(cell[2]) := 0b_0000;
	init(lock) := 0;
	next(lock) := case
		P_WL1 : 1;
		P_WL2 : 2;
		P_W12 : {1,2};
		P_W1: 1;
		P_W2: 2;
		TRUE: 0;
		esac;
	next(cell[1]) := case
		proc1_state = "W" : (proc1.mem_cell[1] + proc1.mem_cell[2] + 0b_0001) + proc1.mem_cell[1];
		proc2_state = "W" : proc2.mem_cell[1];
		TRUE: cell[1];
		esac;
	next(cell[2]) := case
		proc2_state = "W" : (proc2.mem_cell[1] + proc2.mem_cell[2] + 0b_0001) + proc2.mem_cell[2];
		proc1_state = "W" : proc1.mem_cell[2];
		TRUE: cell[2];
		esac;

MODULE main
 VAR
	S1: array 1..4 of {"W_1","R_1","W_2","R_2","NOP"};
 	S2: array 1..4 of {"W_1","R_1","R_2","W_2","NOP"};
 	p1: mem_process1(1,acell,bcell,S1);
	p2: mem_process1(2,acell,bcell,S2);
	acell: mem_block1(1,p1,p2);
	bcell: mem_block1(2,p1,p2);
 ASSIGN
	S1[1] := "W_1";
	S1[2] := "NOP";
	S1[3] := "NOP";
	S1[4] := "NOP";
	S2[1] := "NOP";
	S2[2] := "NOP";
	S2[3] := "NOP";
	S2[4] := "NOP";

 SPEC AG !(p1.state[1] = "WW" & p1.state[2] = "WW")


